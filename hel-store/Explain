

شرح كل ملف ووظيفته (Explanation of Each File's Role)

    main.js (ملف عملية Electron الرئيسية - Main Process File)
        هذا هو نقطة الدخول الرئيسية لتطبيق Electron.
        يقوم بإنشاء نافذة المتصفح (BrowserWindow) التي ستعرض واجهة المستخدم (index.html).
        يدير أحداث التطبيق على مستوى نظام التشغيل (مثل الإغلاق، التنشيط).
        يحتوي على منطق الواجهة الخلفية (backend logic) التي تتفاعل مع نظام التشغيل، مثل:
            تشغيل أوامر pacman و yay باستخدام child_process.spawn.
            جلب قوائم الحزم من مستودعات Arch/Helwan و AUR.
            تثبيت وإزالة الحزم باستخدام pkexec (لأنه يتطلب صلاحيات المدير).
        يتواصل مع renderer.js (ملف واجهة المستخدم) عبر قنوات IPC (Inter-Process Communication) لتلقي الطلبات وإرسال البيانات أو تحديثات الحالة.

    preload.js (سكريبت المعالجة المسبقة - Preload Script)
        هذا الملف يعمل في بيئة معزولة (isolated context) قبل تحميل renderer.js في نافذة المتصفح.
        وظيفته الأساسية هي إنشاء جسر آمن (bridge) بين بيئة Node.js (التي يعمل بها main.js) وبيئة المتصفح (التي يعمل بها renderer.js).
        يمنع renderer.js من الوصول المباشر إلى Node.js APIs لأسباب أمنية.
        يقوم بتعريض وظائف محددة (مثل runCommand, fetchAllPackages, installPackage, removePackage, onActionStatus) إلى window.api في واجهة المستخدم، مما يسمح لـ renderer.js بالتفاعل مع main.js بطريقة آمنة ومحدودة.

    src/index.html (واجهة المستخدم الرئيسية - Main User Interface)
        هذا هو ملف HTML الذي يتم تحميله في نافذة المتصفح التي ينشئها main.js.
        يحتوي على بنية واجهة المستخدم المرئية:
            العناصر المرئية مثل شريط البحث، قوائم الفلاتر المنسدلة (للفئات والمستودعات).
            الجدول الذي سيتم عرض قائمة الحزم فيه.
            عناصر عرض حالة العمليات (مثل رسائل التثبيت/الحذف).
        يقوم بتضمين renderer.js (باستخدام script src="renderer.js") ليضيف التفاعل الديناميكي.

    src/renderer.js (سكريبت واجهة المستخدم - Renderer Script)
        هذا هو الكود البرمجي الذي يعمل داخل سياق نافذة المتصفح (مثل JavaScript في أي صفحة ويب).
        يتعامل مع تفاعلات المستخدم:
            قراءة مدخلات البحث والفلاتر.
            استدعاء الوظائف المكشوفة من preload.js (عبر window.api) لطلب البيانات من main.js (مثل جلب الحزم).
            تحديث واجهة المستخدم (DOM) لعرض الحزم التي تم جلبها.
            معالجة أحداث الأزرار (التثبيت، الإزالة) وإرسال هذه الطلبات إلى main.js.
            يستقبل تحديثات الحالة من main.js ويعرضها للمستخدم.
        يقوم بتخزين قائمة الحزم التي تم جلبها في الذاكرة لتسهيل عمليات الفلترة والبحث السريعة دون الحاجة إلى إعادة جلب البيانات من نظام التشغيل في كل مرة.

    package.json
        ملف تعريفي لمشروع Node.js الخاص بك.
        يحتوي على اسم المشروع وإصداره ووصفه.
        يحدد نقطة الدخول الرئيسية للتطبيق ("main": "main.js").
        يسرد التبعيات ("dependencies": {"electron": "^X.Y.Z"}) التي يحتاجها المشروع.
        يحدد السكريبتات التي يمكن تشغيلها (مثل "start": "electron .") لبدء التطبيق.

    package-lock.json
        يتم إنشاؤه تلقائيًا بواسطة npm (أو yarn) ويسجل الإصدارات الدقيقة لجميع التبعيات وتوابعها، مما يضمن أن عمليات التثبيت المستقبلية ستستخدم نفس الإصدارات.

    assets/icons/app_icon.png
        مجلد يحتوي على أيقونة التطبيق المستخدمة في نافذة البرنامج وشريط المهام.

مخطط التفاعل الأساسي (Basic Interaction Flow)

+----------------+      IPC       +-----------------+
|   main.js      |<-------------->|   renderer.js   |
| (Main Process) |    (Secure)    | (Renderer Process)|
+----------------+                +-----------------+
        ^                                   ^
        |                                   |
        |  Calls external commands          |  Updates UI
        |  (pacman, yay, pkexec)            |  Handles user input
        |                                   |
        v                                   |
+-------------------+                       |
|   Operating System|                       |
|  (Linux Commands) |                       |
+-------------------+                       |
        ^                                   |
        |  Exposes safe APIs                |
        |  (e.g., window.api.fetchAllPackages)
        |                                   |
+----------------+                          |
|  preload.js    |--------------------------+
| (Bridge)       |
+----------------+

باختصار:

    main.js هو العقل المدبر الذي يتحدث مع نظام التشغيل.
    renderer.js هو الوجه الذي يتفاعل معه المستخدم.
    preload.js هو المترجم والأمين الذي يسمح للوجه بالتحدث بأمان مع العقل المدبر.
    index.html هو الهيكل الذي يبني عليه الوجه.


